***************************************************************************************
PHASE1 - Implement REST API for basic content operations(All backend work)
***************************************************************************************
- (DONE) Use NestJS CLI to create domain resource in nestjs
- (DONE) Define the properties for the entity
- (DONE) Add the typeorm @CreateDateColumn and @UpdateDateColumn decorators to entity
- (DONE) Implement the request.http 
- (DONE) check in to github
- (DONE) Implement migration for new resource
- (DONE) Implement CRUD services 
      o (DONE) create contentmd record
        o (done) read lesson 5 / of udemy video line 65
        o (done) compare what I did with users and reports against what Im doing with domain and contentmd
        o (done) update create of contentmd to create relation, to make sure I can do this.
      o (done) check in code  
      o (done) Fail on creating where domain does not exist
      o (done) Fail on creating with duplicate slug
      o (done) Fail on creating duplicate record
      o (done) create duplicate record in another domain
      o (done) Do a get of  1 record and Access images array
      o (done) Do a get all content for a particular domain.
      o (done) Update the title and the blog_url of an existing record
      o (done) create a domain with no content and see result when trying to get content from empty domain
- (DONE) Implement a way to seed data for a particular test suite.  In my case I want to 
       seed domain data before running the contentmd test cases.
- (DONE) Define Integration tests
- (DONE) Implement Test cases
- (DONE) check in to github
- (DONE) Create migration for contentmd
- (DONE) Define integration test cases below
      o (done) create new resource
      o (done) write test case 
      o (done) create 2nd domain 
      o (done) throw exception creating duplicate name in given account
      o (done) read up on typeorm migrations
      o (done) create migration to build Domain table
      o (done) determine how I use the Typeorm migrationsRun property to run migration 
         everytime I was to run a test.
      o (done) determine how to clean up table before running all my tests
- (DONE) Implement Test cases
DO FOLLOWING: 
- (DONE) Check In code in github
- Implement integration tests for all the alternate use cases scenarios
     - (DONE) Try to create domain that already exists.
     - (DONE) Find domain id that does not exist and determine outcome; is default outcome acceptable
     - (DONE) Update domain that does not exist and determine outcome; is default outcome acceptable
     - (DONE) Remove domain that does not exist and determine outcome; is default outcome acceptable
- (DONE) Check In code in github
>>>>>> I AM HERE <<<<<<
- (DONE) Test FindByName query to see if find method is And'ing the properties as part of where clause
- (DONE) Enable all my domain routes and make sure that all routes are working as expected
- (DONE) Refactor all services to inject acct_id
- (IN PROGRESS) Create Promote Content Service
    Continue on Line 219 of contentmd.service
    - (DONE)update use case where initially linking 2 content's, both create_date and update_date are left out
      so they are auto generated.
    - (DONE)update use case where promoting to existing linked target, that only the update_date is deleted so
      it gets auto generated and create_date remains on the contentmd record getting promoted
    - modify promote to return the toContentmd object
    - test modifyContentmdInstance with base case#1 and Case#
    - Cleanup all console logs and comments
    - test case#1 and case# manually one more time
    - begin writing e2e test cases for promotion service 
    
- Run test:e2e to ensure all the routes are still working.
- (NS) Implement promote content controller resource
- (NS) Implement promote content controller resource e2e test
- Check In code in github
>>>>>>  repeat above for the contentmd resource <<<<<<<<

***************************************************************************************
PHASE2 - Implement S3 Logic content store. I need to implement S3 content store to see 
         how to refactor code before implementing any more services
***************************************************************************************
- Review following youtube videos
    https://www.youtube.com/watch?v=_DRklnnJbig&t=427s   // basic node and s3
    https://www.youtube.com/watch?v=NZElg91l_ms          // example using multer
- See this boiler plate example using multer 
  https://github.com/rohan-paul/aws-s3-file_upload-node-mongo-react-multer

- Implement getContent, getContentById, putContent
- Create integration tests for getContent, getContentById and putContent

***************************************************************************************
PHASE2 - Refactoring / Enhancements
***************************************************************************************
- If I plan to use slug as matching key when doing copy, create index on slug column in the
  contentmd table
- Review every route and ensure that each route is acct_id aware. Determine if and 
  when it may not be needed (which I think is never)  
- Implement versioning; is it 2 separate deployments
- If acct_id is going to be visible in the url, I need to changes its type to uuid
  Consider using nanoid as its small and I don't see accounts exceeding 100's of thousands 
  of records. If it does not work, then resort to uuid/v4. See following link for nanoid
  https://www.npmjs.com/package/
- Create required index on domain table on acct_id; that is all that should be needed.
- Update my code so I implement a cascade insert, so that when I insert a 
  contentmd record, I also insert the associated domain. (NOT sure this is necessary
  because I am more or less doing the same thing as preload)
- (not sure if i did this) Change blog_url and blog_url_override to base_url or url_prefix; 
       ..make both of them the same on domain and contentmd record
- Implement pagination.
- Implement caching

***************************************************************************************
PHASE3 - Implement AuthAPI integration with ContentApi microservice
***************************************************************************************

- Create Conceptual platform architecture depicting how authservice and contentapi
- Refresh how authentication worked in the Nestjs REST Users/auth module.
- Refresh how authenticaion worked in the udemy video with stephen grider, 
  namely how the app server was set up with a proxy to the API services and 
  how same cookie was used for both app server and API requests. Can we 
  implement same in Preact?
- Create Interaction diagram how I will integrate Users/auth api and 
  contentapi microservice, or any microservice in general.
- Implement a VERY rudimentary (basic ui) to 

PHASE3 - Implement rest of contentapi requirements (server side)
- steps tbd

PHASE4 - Implement new features in my blog post (client side)
- steps tbd

PHASE5 - Mock up platform UI 
- steps tbd
