PHASE1 - Implement Graphql API for basic content operations(All backend work)

- (DONE) Use NestJS CLI to create domain resource in nestjs
- (DONE) Define the properties for the entity
- (DONE) Add the typeorm @CreateDateColumn and @UpdateDateColumn decorators to entity
- (DONE) Implement the request.http 
- (DONE) check in to github
- (DONE) Implement migration for new resource
- (DONE) Implement CRUD services 
      o (DONE) create contentmd record
        o (done) read lesson 5 / of udemy video line 65
        o (done) compare what I did with users and reports against what Im doing with domain and contentmd
        o (done) update create of contentmd to create relation, to make sure I can do this.
      o (done) check in code  
      o (done) Fail on creating where domain does not exist
      o (done) Fail on creating with duplicate slug
      o (done) Fail on creating duplicate record
      o (done) create duplicate record in another domain
      o (done) Do a get of  1 record and Access images array
      o Create new record and update the title and the blog_url_override
      o Do a get all of content for a particular domain.

- (NS) Implement a way to seed data for a particular test suite.  In my case I want to 
       seed domain data bfore running the contentmd test cases.
       Take a look at the blog post below and see if this is possible
       https://blog.echobind.com/up-and-running-nextjs-and-typeorm-2c4dff5d7250

- (NS) Define Integration tests
- (NS) Implement Test cases
- (NS) check in to github
- (NS) Create migration for contentmd
- (NS) Define integration test cases below
      o (done) create new resource
      o (done) write test case 
      o (done) create 2nd domain 
      o (done) throw exception creating duplicate name in given account
      o (done) read up on typeorm migrations
      o (done) create migration to build Domain table
      o determine how I use the Typeorm migrationsRun property to run migration 
         everytime I was to run a test.
      o (done) determine how to clean up table before running all my tests
- (NS) Implement Test cases
- DO FOLLOWING: 
  (SKIP THIS ONE)
  See that I have implemented class below correctly
     https://github.com/BrunnerLivio/nestjs-integration-test-db-example/blob/master/src/test/testing.module.ts
  Read my udemy course to see which model if falls into (eg. same module or separate modules)
  Try to set this up so I can call getEntities from TestUtils
- (DONE) Check In code in github
- Implement integration tests for all the alternate use cases scenarios
     - (DONE) Try to create domain that already exists.
     - (DONE) Find domain id that does not exist and determine outcome; is default outcome acceptable
     - (DONE) Update domain that does not exist and determine outcome; is default outcome acceptable
     - (DONE) Remove domain that does not exist and determine outcome; is default outcome acceptable
- Check In code in github

>>>>>>  repeat above for the contentmd resource <<<<<<<<

- Identify/document all other steps up until creating the putContent, getContent,
  and getContentById resolvers
- Create a migration file that creates contentmd table in sqlite
- Implement getContent, getContentById, putContent
- Create integration tests for getContent, getContentById and putContent
- Research how to implement grapqhql pagination for getContent
- Implement integration test for pagination.

PHASE2 - Implement AuthAPI integration with ContentApi microservice

- Create Conceptual platform architecture depicting how authservice and contentapi
- Refresh how authentication worked in the Nestjs REST Users/auth module.
- Refresh how authenticaion worked in the udemy video with stephen grider, 
  namely how the app server was set up with a proxy to the API services and 
  how same cookie was used for both app server and API requests. Can we 
  implement same in Preact?
- Create Interaction diagram how I will integrate Users/auth api and 
  contentapi microservice, or any microservice in general.
- Implement a VERY rudimentary (basic ui) to 

PHASE3 - Implement rest of contentapi requirements (server side)
- steps tbd

PHASE4 - Implement new features in my blog post (client side)
- steps tbd

PHASE5 - Mock up platform UI 
- steps tbd
